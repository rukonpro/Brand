generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  photo       String
  description String?
  parentId String?    @db.ObjectId
  parent   Category?  @relation("CategoryToParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Category[] @relation("CategoryToParent")
  Products Product[]
}

model Brand {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  logo        String
  website     String?
  Products Product[]
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       String
  body       String
  rating     Int
  createdAt  DateTime @default(now())
}

model Dimension {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  length  Float?
  width   Float?
  height  Float?
  Product Product? @relation
}

model Product {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  photos          String[]      // Array of photo URLs
  price           Float
  material        String?
  quantity        Int
  warranty        String?
  protection      String?
  colors          String[]      @default([])
  sizes           String[]      @default([])
  rating          Float         @default(0)
  tags            String[]      @default([])
  availability    Availability  @default(IN_STOCK)
  status          Status        @default(ACTIVE)
  brand           Brand?        @relation(fields: [brandId], references: [id])
  brandId         String?       @db.ObjectId
  category        Category?     @relation(fields: [categoryId], references: [id])
  categoryId      String?       @db.ObjectId
  dimension       Dimension?    @relation(fields: [dimensionId], references: [id])
  dimensionId     String?       @db.ObjectId @unique
  offers          Offer[]    @relation("ProductOffers")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}


enum Availability {
  IN_STOCK
  OUT_OF_STOCK
}

enum Status {
  ACTIVE
  INACTIVE
  DISCONTINUED
}


model Offer {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  description     String?
  discountType    DiscountType
  discountValue   Float
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean    @default(true)
  product         Product    @relation("ProductOffers", fields: [productId], references: [id])
  productId       String     @db.ObjectId
}

enum DiscountType {
  PERCENTAGE
  FLAT
}



model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  gender         Gender?
  dateOfBirth    DateTime?
  phoneNumber    String?    @unique
  email          String    @unique
  country        String?
  houseNumber    String?
  street         String?
  city           String?
  postalCode     String?
  state          String?
  role           Role      @default(USER) // Default role
  profilePhoto   String?   // Nullable field for profile photo URL
  coverPhoto     String?   // Nullable field for cover photo URL
  password       String?    // Add this line for password
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
enum Role {
  ADMIN
  USER
  SUPPLIER
}
