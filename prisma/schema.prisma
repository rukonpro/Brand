generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      String
  body      String
  rating    Int      @default(0)
  createdAt DateTime @default(now())
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  photo       String
  description String?
  parentId    String?    @db.ObjectId
  parent      Category?  @relation("CategoryToParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[] @relation("CategoryToParent")
  Products    Product[]
}

model Brand {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  logo     String
  website  String?
  Products Product[]
}

model Product {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  basePrice      Float
  images         String[]
  warranty       String?
  protection     String?
  specifications Json?
  tags           String[]    @default([])
  status         Status      @default(ACTIVE)
  brand          Brand?      @relation(fields: [brandId], references: [id])
  brandId        String?     @db.ObjectId
  category       Category    @relation(fields: [categoryId], references: [id])
  categoryId     String      @db.ObjectId
  offers         Offer[]     @relation("ProductOffers")
  orderItem      OrderItem[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  variants Variant[] @relation("ProductVariants") // Define the relation

  CartItem CartItem[]
}

model Variant {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  productId    String       @db.ObjectId // Reference to the Product
  attributes   Json // JSON object for attributes (color, size, etc.)
  price        Float
  stock        Int
  sku          String       @unique
  varcode      String       @unique
  availability Availability @default(IN_STOCK)
  images       String[] // Array of variant image URLs
  product      Product?     @relation("ProductVariants", fields: [productId], references: [id])
  Offer        Offer?       @relation(fields: [offerId], references: [id])
  offerId      String?      @db.ObjectId
  CartItem     CartItem[]
}

enum Availability {
  IN_STOCK
  OUT_OF_STOCK
}

enum Status {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

model Offer {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  description   String?
  discountType  DiscountType
  discountValue Float
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean      @default(true)
  product       Product      @relation("ProductOffers", fields: [productId], references: [id])
  productId     String       @db.ObjectId
  Variant       Variant[]
  variantId     String?      @db.ObjectId
}

enum DiscountType {
  PERCENTAGE
  FLAT
}

model User {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  firstName         String
  lastName          String
  gender            Gender?
  dateOfBirth       DateTime?
  phoneNumber       String?
  email             String            @unique
  country           String?
  houseNumber       String?
  street            String?
  city              String?
  postalCode        String?
  state             String?
  role              Role              @default(USER) // Default role
  profilePhoto      String? // Nullable field for profile photo URL
  coverPhoto        String? // Nullable field for cover photo URL
  password          String? // Add this line for password
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  shippingAddresses ShippingAddress[]
  orders            Order[]
  CartItem          CartItem[]
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Role {
  ADMIN
  USER
  SUPPLIER
}

model Banner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  image     String // ব্যানারের চিত্রের URL
  title     String? // ব্যানারে প্রদর্শিত টেক্সট
  link      String? // ব্যানারে কোনো লিঙ্ক দেওয়া থাকলে
  status    Status   @default(ACTIVE)
  startDate DateTime @default(now()) // ব্যানার প্রদর্শনের শুরু তারিখ
  endDate   DateTime // ব্যানার প্রদর্শনের শেষ তারিখ
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingAddress {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  firstName   String
  lastName    String
  phoneNumber String
  houseNumber String
  street      String
  city        String
  postalCode  String
  state       String
  country     String
  isDefault   Boolean? @default(false) // Whether this is the default address
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
}

model Order {
  id                     String           @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String           @db.ObjectId
  user                   User             @relation(fields: [userId], references: [id])
  status                 String           @default("PENDING")
  paymentStatus          String           @default("PENDING")
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  totalTax               Float            @default(0) // Total tax for the entire order
  totalPriceWithDiscount Float            @default(0) // Total price with discount for the entire order
  totalPrice             Float            @default(0) // Total price without discount for the entire order
  totalDeliveryFee       Float            @default(0)
  items                  OrderItem[] // Order items
  shippingAddressId      String?          @db.ObjectId
  shippingAddress        ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
}

model OrderItem {
  id                     String  @id @default(auto()) @map("_id") @db.ObjectId
  quantity               Int // Quantity of the product
  price                  Float   @default(0) // Price of the product
  totalPrice             Float   @default(0) // Total price without discount
  discountPercentage     Float?  @default(0) // Discount percentage for the item
  totalPriceWithDiscount Float   @default(0) // Price after discount
  taxPercentage          Float?  @default(0) // Tax percentage for the item
  totalTax               Float   @default(0) // Total tax amount
  deliveryFee            Float   @default(0)
  order                  Order   @relation(fields: [orderId], references: [id])
  orderId                String  @db.ObjectId
  product                Product @relation(fields: [productId], references: [id])
  productId              String  @db.ObjectId // The product in the order
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}

model CartItem {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  productId          String   @db.ObjectId // Reference to Product
  variantId          String   @db.ObjectId // Reference to Variant (if applicable)
  productName        String
  price              Float // Price at the time of adding to cart
  quantity           Int
  selectedAttributes Json // Store attributes like color, size, etc.
  userId             String   @db.ObjectId // The user who owns the cart
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id]) // Relation to User
  variant            Variant  @relation(fields: [variantId], references: [id]) // Relation to Variant (optional)
  product            Product  @relation(fields: [productId], references: [id])
}
